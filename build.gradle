import java.text.SimpleDateFormat

plugins {
  id "java-library"
  alias libs.plugins.checkerframework
  alias libs.plugins.indra
  alias libs.plugins.indra.checkstyle
  alias libs.plugins.indra.git
  alias libs.plugins.indra.publishing
  alias libs.plugins.indra.spotless
  alias libs.plugins.shadow apply false
}

allprojects {
  apply plugin: "java-library"
  apply plugin: "net.kyori.indra"
  apply plugin: "net.kyori.indra.checkstyle"
  apply plugin: "net.kyori.indra.git"
  apply plugin: "net.kyori.indra.publishing"
  apply plugin: "net.kyori.indra.licenser.spotless"
  apply plugin: "org.checkerframework"

  group "${rootProject.maven_group}"
  version "${rootProject.mod_version}"

  test {
    useJUnitPlatform {
      excludeTags "dependency_checksum"
    }
  }

  repositories {
    maven {
      name "papermc"
      url "https://papermc.io/repo/repository/maven-public/"
    }
    maven { url "https://jitpack.io" }
    maven {
      url "https://libraries.minecraft.net"
    }
    sonatype.ossSnapshots()
    mavenCentral()
  }

  dependencies {
    testImplementation libs.bundles.junit
    compileOnly libs.annotations
    annotationProcessor libs.annotations
  }

  indra {
    github("TreyRuffy", "CommandBlocker")
    lgpl3OrLaterLicense()

    javaVersions {
      target(8)
      minimumToolchain(16)
      testWith(8, 11, 17, 18)
    }

    checkstyle("10.6.0")
    // https://checkstyle.sourceforge.io/releasenotes.html
  }

  indraSpotlessLicenser {
    java {
      property("name", "TreyRuffy")
      property("year", "2023")
    }
  }

  compileJava {
    options.compilerArgs +=	"-Xlint:-processing" // Fixes "no processor claimed any of these annotations" warning
  }

  project.ext {
    GIT_COMMIT = !indraGit.isPresent() ? "unknown" : indraGit.commit().abbreviate(7).name()
    FULL_VERSION = "${rootProject.version}".toString().replace("-SNAPSHOT", "-dev-${GIT_COMMIT}")

    releaseChangelog = {
      def dateFormat = new SimpleDateFormat("yyyy-MM-dd")
      dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
      def date = dateFormat.format(new Date())
      def changelogFormatText = file("../docs/changelogs/format.md").text.trim()
      def changelogText = file("../docs/changelogs/${rootProject.version}.md").text.trim()
      def lastVersion = changelogText.split("\n")[0].split("=")[1].trim()
      def changelog = changelogFormatText
        .replace("%date%", date)
        .replace("%changelog%", changelogText)
        .replace("%version%", rootProject.version.toString())
        .replace("%last_version%", lastVersion)
        .replace("%github_url%", rootProject.github_url.toString())

      StringBuilder changelogBuilder = new StringBuilder()
      for (String line : changelog.split("\n")) {
        if (!line.startsWith("!"))
          changelogBuilder.append(line).append("\n")
      }
      if (!rootProject.buildDir.exists()) rootProject.buildDir.mkdirs()
      new File(rootProject.buildDir, "CHANGELOG.md").text = changelogBuilder.toString().trim()
      return changelogBuilder.toString().trim()
    }
  }
}
